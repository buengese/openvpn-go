run:
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 3m
  tests: true

linters-settings:
  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    # Such cases aren't reported by default.
    # Default: false
    check-type-assertions: true

  mnd:
    # List of function patterns to exclude from analysis.
    # Values always ignored: `time.Date`,
    # `strconv.FormatInt`, `strconv.FormatUint`, `strconv.FormatFloat`,
    # `strconv.ParseInt`, `strconv.ParseUint`, `strconv.ParseFloat`.
    # Default: []
    ignored-functions:
      - os.Chmod
      - os.Mkdir
      - os.MkdirAll
      - os.OpenFile
      - os.WriteFile
      - prometheus.ExponentialBuckets
      - prometheus.ExponentialBucketsRange
      - prometheus.LinearBuckets
    ignored-numbers:
      - 0
      - 1
      - 2
      - 3

  gomodguard:
    blocked:
      # List of blocked modules.
      # Default: []
      modules:
        - github.com/golang/protobuf:
            recommendations:
              - google.golang.org/protobuf
            reason: "see https://developers.google.com/protocol-buffers/docs/reference/go/faq#modules"
        - github.com/satori/go.uuid:
            recommendations:
              - github.com/google/uuid
            reason: "satori's package is not maintained"
        - github.com/gofrs/uuid:
            recommendations:
              - github.com/google/uuid
            reason: "gofrs' package is not go module"

  nakedret:
    # Make an issue if func has more lines of code than this setting, and it has naked returns.
    # Default: 30
    max-func-lines: 0

  nolintlint:
    # Exclude following linters from requiring an explanation.
    # Default: []
    allow-no-explanation: [ funlen, gocognit, lll, wrapcheck, mnd ]
    # Enable to require an explanation of nonzero length after each nolint directive.
    # Default: false
    require-explanation: true

  govet:
    enable:
        - shadow
  dupl:
    threshold: 100
    
  goconst:
    min-len:         2
    min-occurrences: 2


linters:
  disable-all: true
  enable:
    - bodyclose
    - dogsled
    - dupl
    - dupword
    - errcheck
    - errorlint
    - errname
    - gocheckcompilerdirectives
    - goconst 
    - gocritic
    - gocyclo
    - godot
    - godox
    - gofmt
    - goimports
    - mnd
    - goprintffuncname
    # # - gosec to many integer conversion false positives
    # - gosimple causes oom error
    # - govet
    - grouper
    - ineffassign
    - misspell
    - nonamedreturns
    - nakedret
    # - noctx
    - nolintlint
    - prealloc
    - revive
    # - staticcheck
    # - stylecheck
    - typecheck
    - unconvert
    - unparam
    - unused
    - whitespace
    - wrapcheck
    - wsl


issues:
  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 50

  exclude-rules:
    - source: "^//\\s*go:generate\\s"
      linters: [ lll ]
    - source: "//noinspection"
      linters: [ gocritic ]
    - source: "^\\s+if _, ok := err\\.\\([^.]+\\.InternalError\\); ok {"
      linters: [ errorlint ]
    # Relaxed linter settings for tests. Not following these linters is unlikely to influence the
    # correctness of testing code. 
    - path: "_test\\.go"
      linters:
        - bodyclose
        - dupl
        - funlen
        - goconst
        - gosec
        - noctx
        - wrapcheck
        - gochecknoglobals
        - govet
    - path: test/
      linters:
        - bodyclose
        - dupl
        - funlen
        - goconst
        - gosec
        - noctx
        - wrapcheck
        - gochecknoglobals
        - govet
    - path: cmd/
      linters:
      # When using cobra it's somewhat standard practice to use globals and init(). While I agree 
      # that having to resort to using globals or init() is often indicative of bad design choices
      # I think there usage in defining cobra commands is fine.
        - gochecknoglobals
        - gochecknoinits
        - forbidigo       # Prints are fine in cmd/.
